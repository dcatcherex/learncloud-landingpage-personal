# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: (Development) CI/CD AI-Learn landing page (AWS-ECR)

on:
  pull_request:
    branches:
      - main
    types: [ opened, synchronize, closed ]
  push :
    branches:
      - main
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - '.gitattributes'
      - '.editorconfig'
      - '.eslintrc.js'
      - '.prettierrc.js'
      - '.vscode/**'
      # - 'aws/**'
      # - 'terraform/**'
      # - 'helm/**'
      # - 'k8s/**'
      # - 'ansible/**'

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: "471112879285"
  AWS_REGION: "ap-southeast-1"
  AWS_ROLE_ARN: "arn:aws:iam::471112879285:role/github-actions-ailearn-landingpage"
  AWS_ROLE_SESSION_NAME: "github-action-landing-page-fargate-deployment"

  ECR_REPOSITORY: "ai-learn-nextjs-landing-page"
  ECS_CLUSTER: "dev-fargate-cluster"
  ECS_SERVICE: "ai-learn-landing-page"
  ECS_TASK_DEFINITION_FILE: .aws/task-definition.json
  ECS_TASK_DEFINITION: "ai-learn-nextjs-landing-page"
  CONTAINER_NAME: "nextjs-landing-page"
  IMAGE_TAG: "latest"

jobs:
  build:
    name: Build Next.js and Push to AWS ECS
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-${{ github.event.repository.name }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          # role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }} # Defaults to "GitHubActions", but may be changed if required.
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: setup-docker-buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_GITHUB_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_GITHUB_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/production/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
      name: Deploy to AWS ECS
      runs-on: ubuntu-latest
      needs: build
      
      steps:
        - name: Checkout repository
          id: checkout
          uses: actions/checkout@v4

        - name: Configure AWS Credentials
          id: configure-aws-credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ env.AWS_ROLE_ARN }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ needs.build.outputs.image }}

        - name: Download task definition
          id: download-task-def
          run: |
            aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition | jq -r 'del(
              .taskDefinitionArn,
              .requiresAttributes,
              .compatibilities,
              .revision,
              .status,
              .registeredAt,
              .registeredBy
            )' > task-definition.json

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true