# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Landing-Page-Main-CI/CD (EC2)

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, closed]
  push:
    branches:
      - main
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "**/*.md"
      - "docs/**"
      - ".gitignore"
      - ".gitattributes"
      - ".editorconfig"
      - ".eslintrc.js"
      - ".prettierrc.js"
      - ".vscode/**"
      # - 'aws/**'
      # - 'terraform/**'
      # - 'helm/**'
      # - 'k8s/**'
      # - 'ansible/**'

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: "471112879285"
  AWS_REGION: "ap-southeast-1"
  AWS_ROLE_ARN: "arn:aws:iam::471112879285:role/github-actions-ailearn-landingpage"
  AWS_ROLE_SESSION_NAME: "github-action-landing-page-ec2-deployment"
  ECR_REPOSITORY: "ai-learn-nextjs-landing-page"
  IMAGE_TAG: "latest"

jobs:
  build:
    name: Build Next.js and Push to AWS ECR
    runs-on: ubuntu-latest
    environment: aws
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions-${{ github.event.repository.name }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          # role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }} # Defaults to "GitHubActions", but may be changed if required.
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: setup-docker-buildx
        uses: docker/setup-buildx-action@v3

      # Solution 1 : build with docker command
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_GITHUB_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_GITHUB_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/aws-dev/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  ssh-to-frontend-server-and-update-docker-container:
    name: SSH to Frontend Server and Update Docker Container
    runs-on: ubuntu-latest
    environment: aws
    needs: build
    steps:
      - name: SSH to Frontend server and update docker container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # private key for ssh
          passphrase: ${{ secrets.SSH_PRIVATE_KEY_PASSPHRASE }}

          script: |

            cd ailearn-landingpage

            # run aws ecr login to aws ecr and process with iam role
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            sudo docker-compose stop # stop the container
            sudo docker-compose rm -f # -f: This flag means to force the removal of containers. It will stop the containers if they are running and then remove them.
            sudo docker-compose pull # image name must be the same as repository
            sudo docker-compose -f docker-compose.dev.aws.yaml up -d # -d => detached mode
            sudo docker image prune -af # -af: -a => all, -f => force, remove all images including unused and used images
